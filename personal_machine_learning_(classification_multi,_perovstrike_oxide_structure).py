# -*- coding: utf-8 -*-
"""Personal: Machine Learning (Classification: Multi, Perovstrike Oxide Structure).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ifHDGZdCDvzV0lnmfJmVJhHieZcXI9Oa
"""

# Multi Classification of Consumption Prediction
# Classifiers Tested: Random Forest
# Highest Accuracy: 80%, Random Forest

# Installations
import csv
import numpy as np
from sklearn import svm
from matplotlib import pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import accuracy_score

# Data Manipulation
# Data: https://www.kaggle.com/datasets/jahnveenarang/cvdcvd-vd
# Data Column Input:
  # 0: Valence of A
  # 1: Valence of B
  # 2: Radius of AA cation
  # 3: Radius of A cation
  # 4: Radius of B cation
  # 5: Average electronegativity value of A cation
  # 6: Average electronegativity value of B cation
  # 7: Electronegativity difference with radius
  # 8: Bond length of A-O pair
  # 9: Bond length of B-O pair
  # 10: Goldschmidt tolerance factor
  # 11: New tolerance factor
  # 12: Octahedral factor

# Classification Output:
  # 1: tetragonal 102 --> 102
  # 2: cubic 2460 --> 102
  # 3: orthorhombic 1354 --> 102
  # 4: rhombohedral 249 --> 102
  # Imbalanced Dataset, thus need to slim down sizes of other individuals

# Training File
dataFile = open("//content//drive//MyDrive//Coding//Personal Projects//3: Machine Learning//Resources//PerovstrikeOxideStructure//train.csv")
data = csv.reader(dataFile)
x = []
y = []

header = True
for row in data:
  if header:
    header = False
    continue
  else:
    if row[13] == "tetragonal":
      y.append(1)
    elif row[13] == "cubic":
      y.append(2)
    elif  row[13] == "orthorhombic":
      y.append(3)
    elif row[13] == "rhombohedral":
      y.append(4)
    i = 0
    input_values = []
    while i < 13:
      input_values.append(row[i])
      i = i + 1
    x.append(input_values)

# PCA Analysis
# Check to see if inputs need to be removed (generally, anything under 60%)
# Under this experiment, all values are over 98%
pca = PCA()
x_pca = pca.fit_transform(x)
plt.figure(figsize=(10,10))
plt.plot(np.cumsum(pca.explained_variance_ratio_), 'ro-')
plt.grid()

# Test Model: Random Forest
x_train, x_test, y_train, y_test = train_test_split(x, y , test_size = 0.20, random_state = 1)
model = RandomForestClassifier(n_estimators = 40, random_state = 0)
model.fit(x_train, y_train)
predictions = model.predict(x_test)

cm = confusion_matrix(y_test, predictions)
accuracy = accuracy_score(y_test, predictions)
accuracy = accuracy * 100
print(accuracy, "%")